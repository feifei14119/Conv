#pragma once 

#include "ProblemControl.h"
#include "ConvFwd1x1Config.h"
//#include "ConvFwd1x1KernelWriter.h"

/************************************************************************/
/* solution控制                                                          */
/************************************************************************/
class ConvFwd1x1Solution : public SolutionCtrlBase
{
private:
	T_KernelArgu d_in, d_wei, d_bias, d_out, d_negSlop, d_sig;
	cl_mem d_a, d_b, d_c;
	float negSlop;

	// -------------------------------------------------------------------
	size_t align;
	int loop;			// 循环次数

	// -------------------------------------------------------------------
	// prefetch mult-kernel
	int *h_signal = nullptr;
	int sig_num_per_cu,size_sig;
	T_KernelArgu d_signal;
	std::list<T_KernelArgu> * preArgus;

public:
	ConvFwd1x1Solution() :SolutionCtrlBase() {}

	/************************************************************************/
	/* 根据problem参数成solution参数空间                                      */
	/************************************************************************/
	E_ReturnState GenerateSolutionConfigs();


	/************************************************************************/
	/* 申请显存                                                            */
	/************************************************************************/
	E_ReturnState InitDev();

	/************************************************************************/
	/* 返回结果                                                            */
	/************************************************************************/
	E_ReturnState GetBackResult();

	/************************************************************************/
	/* 释放显存	                                                           */
	/************************************************************************/
	void ReleaseDev();

	/************************************************************************/
	/* 根据solution参数生成source, complier和worksize                        */
	/************************************************************************/
	E_ReturnState GenerateSolution();

	int N_LCL_IN_MAPS;
	int N_IN_GROUPS;
	int N_LCL_IN_MAPS_ONCE;
	int	N_OUT_GROUPS;
	int CLOOP0;
	int CLOOP2;
//	E_ReturnState generateParameters();
//	E_ReturnState generateCompilerOption();
//	E_ReturnState generateWorkLoad();
//	E_ReturnState generateSource();

	/************************************************************************/
	/* 自动生成kernel								                        */
	/************************************************************************/
//	void autoGenKernel();


	/************************************************************************/
	/* 记录性能和配置															*/
	/************************************************************************/
	void ReportProblemPerformence();
	
	/************************************************************************/
	/* 测试下标计算															*/
	/************************************************************************/
	void simulateIndex();
	
};

/************************************************************************/
/* 问题控制                                                             */
/************************************************************************/
class ConvFwd1x1Problem : public ProblemCtrlBase
{
public:
	ConvFwd1x1Problem() :ProblemCtrlBase() { Solution = new ConvFwd1x1Solution(); }
	ConvFwd1x1Problem(std::string name) :ProblemCtrlBase(name) { Solution = new ConvFwd1x1Solution(); }

	/************************************************************************/
	/* 运行问题														        */
	/************************************************************************/
	E_ReturnState TurnProblem();
	E_ReturnState TurnProblem(int WH, int C, int K, int N, int UV, bool isBias, bool isRelu);
	
	/************************************************************************/
	/* 参数初始化                                                            */
	/************************************************************************/
	E_ReturnState InitHost();

	/************************************************************************/
	/* HOST端                                                               */
	/************************************************************************/
	E_ReturnState Host();

	/************************************************************************/
	/* 校验                                                                 */
	/************************************************************************/
	E_ReturnState Verify();
	 
	/************************************************************************/
	/* 释放                                                                  */
	/************************************************************************/
	void ReleaseHost();

	void caculPerf();
};


